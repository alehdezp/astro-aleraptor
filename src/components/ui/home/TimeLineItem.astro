---
interface Tag {
  label: string;
  color?: string;
}
import Oscp from "@assets/oscp.svg";

interface Props {
  position: "start" | "middle" | "end";
  time: string;
  title: string;
  summary?: string;
  descriptionList?: string[];
  responsibilities?: string[];
  tags?: Tag[];
  collapsedHeight?: number; // Custom collapsed height
}

const {
  position,
  time,
  title,
  summary = "",
  descriptionList: list = [],
  responsibilities = [],
  tags = [],
  collapsedHeight = 50, // Default collapsed height
} = Astro.props as Props;

const uniqueId = `timeline-item-${Math.random().toString(36).substring(2, 11)}`;
const hasDetails = list.length > 0 || responsibilities.length > 0;
---

<li class="relative">
  {(position === "end" || position === "middle") && <hr />}
  <div class="timeline-middle">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 20 20"
      fill="currentColor"
      class="h-5 w-5"
    >
      <path
        fill-rule="evenodd"
        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
        clip-rule="evenodd"></path>
    </svg>
  </div>

  <div class="timeline-end ml-4 mb-5 md:text-start">
    <div class="mb-2">
      <time class="font-mono italic text-base-content">{time}</time>
      <div class="flex text-lg font-bold text-primary mt-3 items-center gap-2">
        {title}
        {title.includes("OSCP") && <Oscp width="28" height="28" />}
      </div>
    </div>

    {summary && <p class="text-base-content/80 mb-2">{summary}</p>}

    {
      hasDetails && (
        <div
          class="timeline-expand-container"
          id={uniqueId}
          data-collapsed="true"
          data-needs-expansion="true"
        >
          <div
            class="timeline-content"
            style={`--collapsed-height: ${collapsedHeight}px;`}
          >
            {list.length > 0 && (
              <div class="">
                <h4 class="font-medium text-secondary mb-1">Description</h4>
                <ul class="list-disc list-inside pl-2 text-base-content/80">
                  {list.map((item: string) => (
                    <li set:html={item} />
                  ))}
                </ul>
              </div>
            )}

            {responsibilities.length > 0 && (
              <div class="">
                <h4 class="text-secondary font-medium text-neutral-content mb-1">
                  Responsibilities
                </h4>
                <ul class="list-disc list-inside pl-2 text-base-content/80">
                  {responsibilities.map((item: string) => (
                    <li set:html={item} />
                  ))}
                </ul>
              </div>
            )}

            <div class="timeline-fade  rounded-3xl bg-gradient-to-t from-base-100/90 to-transparent" />
          </div>

          <div class="flex gap-2 items-center">
            <button class="timeline-toggle-btn items-center ">
              <span class="text-sm text-base-content/70 ml-2 mt-1 ">
                Show more
              </span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="timeline-toggle-icon mt-1.5"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polyline points="6 9 12 15 18 9" />
              </svg>
            </button>
            {tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mt-3">
                {tags.map((tag: Tag) => (
                  <span
                    class={`badge badge-sm font-normal badge-soft px-2 ${tag.color || "badge-accent"} drop-shadow-md drop-shadow-current/8`}
                  >
                    {tag.label}
                  </span>
                ))}
              </div>
            )}
          </div>
        </div>
      )
    }
  </div>

  {(position === "start" || position === "middle") && <hr />}
</li>

<style>
  /* Timeline collapsible content styling */
  .timeline-expand-container {
    position: relative;
    margin-bottom: 1rem;
  }

  /* Content area with custom height variable */
  .timeline-content {
    position: relative;
    overflow: hidden;
    transition: max-height 0.2s ease-out;
    max-height: var(--collapsed-height);
  }

  .timeline-fade {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 3px;
    height: 45px; /* Much taller for dramatic effect */
    opacity: 1;
    z-index: 5; /* Higher z-index to ensure prominence */
  }

  /* Dark theme fade overlay */
  [data-theme="night"] .timeline-fade,
  [data-theme="dark"] .timeline-fade,
  [data-theme="halloween"] .timeline-fade,
  [data-theme="forest"] .timeline-fade,
  [data-theme="black"] .timeline-fade,
  [data-theme="abyss"] .timeline-fade {
    background: linear-gradient(to top, var(--b1, #1f2937) 20%, transparent);
    opacity: 0.25;
  }

  /* Toggle button styling */
  .timeline-toggle-btn {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    margin-top: 0.5rem;
    cursor: pointer;
    padding: 0;
    position: relative;
    z-index: 5; /* Ensure button is above fade */
  }

  .timeline-toggle-icon {
    width: 16px;
    height: 16px;
    transition: transform 0.2s ease;
  }

  /* Expanded state styling */
  .timeline-expand-container[data-collapsed="false"] .timeline-content {
    max-height: 2000px; /* Large enough for any content */
  }

  .timeline-expand-container[data-collapsed="false"] .timeline-fade {
    display: none;
  }

  .timeline-expand-container[data-collapsed="false"] .timeline-toggle-icon {
    transform: rotate(180deg);
  }

  /* Hide button and fade when expansion isn't needed */
  .timeline-expand-container[data-needs-expansion="false"] .timeline-toggle-btn,
  .timeline-expand-container[data-needs-expansion="false"] .timeline-fade {
    display: none;
  }
</style>

<script is:inline>
  // Simplified timeline script with auto-detection
  (function () {
    function setupTimelineItems() {
      // Process all timeline containers
      document
        .querySelectorAll(".timeline-expand-container")
        .forEach((container) => {
          const content = container.querySelector(".timeline-content");
          const toggleBtn = container.querySelector(".timeline-toggle-btn");

          // Skip if elements are missing
          if (!content || !toggleBtn) return;

          // Check if content height exceeds collapsed height to determine if expansion is needed
          const needsExpansion = content.scrollHeight > content.clientHeight;
          container.setAttribute(
            "data-needs-expansion",
            needsExpansion.toString(),
          );

          // Remove old listeners by cloning button
          const newBtn = toggleBtn.cloneNode(true);
          toggleBtn.parentNode?.replaceChild(newBtn, toggleBtn);

          // Setup new click listener
          newBtn.addEventListener("click", () => {
            const isCollapsed =
              container.getAttribute("data-collapsed") === "true";
            container.setAttribute(
              "data-collapsed",
              isCollapsed ? "false" : "true",
            );

            // Update button text
            const textEl = container.querySelector(".timeline-toggle-text");
            if (textEl) {
              textEl.textContent = isCollapsed ? "Show less" : "Show more";
            }
          });
        });
    }

    // Setup handlers for initial load and transitions
    function init() {
      // Small delay to ensure content has rendered properly
      setTimeout(setupTimelineItems, 50);
    }

    // Run on various page lifecycle events
    window.addEventListener("DOMContentLoaded", init);
    window.addEventListener("load", init);
    document.addEventListener("astro:page-load", init);
    document.addEventListener("astro:after-swap", init);

    // Also handle window resize events
    let resizeTimer;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(setupTimelineItems, 100);
    });
  })();
</script>
