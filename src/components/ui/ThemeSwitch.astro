---
import { Icon } from "astro-icon/components";
// Get all the themes from global.css
const themes = [
  "abyss",
  "synthwave",
  "sunset",
  "dark",
  "night",
  "halloween",
  "forest",
  "cisco",
  "cisco-classic",
  "cisco-highcontrast",
  "cisco-warm",
  "cisco-cool",
];
---

<!-- Fixed floating theme switcher button with responsive positioning -->
<div
  class="fixed bottom-4 sm:bottom-6 lg:top-6 lg:bottom-auto left-4 sm:left-6 lg:left-auto lg:right-6 z-[100]"
  id="theme-switcher-container"
>
  <div
    class="dropdown max-lg:dropdown-top max-lg:dropdown-right lg:dropdown-left"
  >
    <div
      tabindex="0"
      role="button"
      class="btn btn-circle btn-primary btn-shadow-lg hover:shadow-xl transition-all duration-400 hover:scale-110 text-primary-content"
      aria-label="Change theme"
      id="theme-toggle-btn"
    >
      <Icon name="mdi:theme-light-dark" class="h-6 w-6 lg:h-8 lg:w-8" />
      <span class="sr-only">Toggle theme</span>
    </div>
    <ul
      tabindex="0"
      class="dropdown-content menu menu-lg z-50 p-2 shadow-lg bg-base-200 rounded-box w-52 max-h-[70vh] overflow-y-auto mt-4 lg:mr-4 lg:mt-0"
      id="theme-dropdown"
    >
      <li class="menu-title font-bold text-base-content/90">Themes</li>
      <div class="divider my-0"></div>
      {
        themes.map((theme) => (
          <li>
            <button
              data-set-theme={theme}
              class="theme-item capitalize justify-between hover:bg-base-300 focus:bg-base-300 transition-all duration-400 hover:scale-110"
            >
              <span>{theme.replace("-", " ")}</span>
              {theme === "sunset" && (
                <span class="badge badge-xs badge-primary">default</span>
              )}
            </button>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script>
  import { themeChange } from "theme-change";

  /**
   * Theme Switcher that works with Astro View Transitions
   */
  class ThemeSwitcher {
    // Define class properties with proper types
    private readonly defaultTheme: string = "sunset";

    constructor() {
      this.initTheme();
      this.setupEventListeners();
    }

    // Initialize theme based on saved preference or system preference
    private initTheme(): void {
      const storedTheme: string =
        localStorage.getItem("theme") ||
        (window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "night"
          : this.defaultTheme);

      document.documentElement.setAttribute("data-theme", storedTheme);
      themeChange(false); // We'll handle localStorage ourselves
    }

    // Set up all event listeners
    private setupEventListeners(): void {
      // For initial page load and subsequent view transitions
      this.addThemeButtonListeners();

      // This will be called when Astro swaps pages during view transitions
      document.addEventListener("astro:page-load", (): void => {
        // Re-initialize theme to ensure consistency
        this.initTheme();
        // Re-attach event listeners to new DOM elements
        this.addThemeButtonListeners();
      });

      // Also support regular page navigations without view transitions
      document.addEventListener("astro:after-swap", (): void => {
        // Same as above but for after-swap event
        this.initTheme();
        this.addThemeButtonListeners();
      });
    }

    // Add click listeners to all theme buttons
    private addThemeButtonListeners(): void {
      // Get current theme
      const currentTheme: string =
        localStorage.getItem("theme") || this.defaultTheme;

      // Find all theme buttons in the current DOM
      const themeButtons: NodeListOf<HTMLButtonElement> =
        document.querySelectorAll("[data-set-theme]");

      // First clear all existing indicators
      this.clearAllIndicators(themeButtons);

      // Then add indicators to the current theme and set up listeners
      themeButtons.forEach((button: HTMLButtonElement): void => {
        const buttonTheme = button.getAttribute("data-set-theme");

        // Mark current theme as active
        if (buttonTheme === currentTheme) {
          this.markAsActive(button);
        }

        // Add click handler - using function reference is not needed here
        button.addEventListener("click", (event: MouseEvent): void => {
          const target = event.currentTarget as HTMLButtonElement;
          const newTheme = target.getAttribute("data-set-theme");
          if (!newTheme) return;

          // Save to localStorage
          localStorage.setItem("theme", newTheme);

          // Apply theme to document
          document.documentElement.setAttribute("data-theme", newTheme);

          // Update indicators
          this.clearAllIndicators(themeButtons);
          this.markAsActive(target);
        });
      });
    }

    // Clear indicators from all buttons
    private clearAllIndicators(buttons: NodeListOf<HTMLButtonElement>): void {
      buttons.forEach((button: HTMLButtonElement): void => {
        button.classList.remove("active");
        const indicators = button.querySelectorAll(".theme-indicator");
        indicators.forEach((indicator: Element): void => indicator.remove());
      });
    }

    // Mark a button as the active theme
    private markAsActive(button: HTMLButtonElement): void {
      button.classList.add("active");
      const indicator = document.createElement("span");
      indicator.className = "theme-indicator ml-2";
      indicator.innerHTML = "âœ“";
      button.appendChild(indicator);
    }
  }

  // Initialize the theme switcher when the page loads
  // This will work both for initial load and subsequent view transitions
  if (typeof window !== "undefined") {
    // Make sure DOM is ready
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => new ThemeSwitcher());
    } else {
      new ThemeSwitcher();
    }
  }
</script>
