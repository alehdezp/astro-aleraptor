[{"title":"Hello World","description":"Welcome to my blog! This is my first post.","tags":["welcome","first-post","documentation"],"slug":"hello-world","content":"Hello everyone! This is my first blog post. I'm excited to share my thoughts and experiences with you.\n\n## What to Expect\n\nIn this blog, I'll be writing about:\n\n- Technology\n- Programming\n- Best practices\n- And much more!\n\n```javascript\n// Here's a simple example of code highlighting\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet('World'));\n```\n\nStay tuned for more content!"},{"title":"Modern CSS Techniques You Should Know","description":"Explore powerful CSS features and techniques for modern web development.","tags":["css","web-development","frontend"],"slug":"modern-css-techniques","content":"CSS has evolved significantly in recent years. Let's explore some modern techniques that can improve your web development workflow.\n\n## CSS Grid Layout\n\nCSS Grid is a powerful tool for creating complex layouts:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n```\n\n## CSS Custom Properties\n\nVariables in CSS make maintenance easier:\n\n```css\n:root {\n  --primary-color: #3b82f6;\n  --secondary-color: #1d4ed8;\n}\n\n.button {\n  background-color: var(--primary-color);\n  color: white;\n}\n```\n\n## Container Queries\n\nThe future of responsive design:\n\n```css\n@container (min-width: 400px) {\n  .card {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n  }\n}\n```\n\n## Best Practices\n\n1. Use semantic class names\n2. Keep specificity low\n3. Embrace modern features\n4. Test across browsers"},{"title":"Writing Effective Technical Documentation","description":"Learn best practices for creating clear and useful technical documentation.","tags":["documentation","technical-writing","best-practices"],"slug":"writing-technical-documentation","content":"Good technical documentation is crucial for any software project. Here's how to write documentation that helps rather than frustrates.\n\n## Key Principles\n\n1. **Know Your Audience**\n   - Who are you writing for?\n   - What is their technical level?\n   - What are they trying to achieve?\n\n2. **Structure Matters**\n   - Use clear headings and subheadings\n   - Keep paragraphs focused and concise\n   - Include examples where helpful\n\n## Code Examples\n\nHere's an example of well-documented code:\n\n```javascript\n/**\n * Calculates the sum of an array of numbers\n * @param {number[]} numbers - Array of numbers to sum\n * @returns {number} The sum of all numbers in the array\n */\nfunction sum(numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n```\n\n## Best Practices\n\n- Keep it up to date\n- Use consistent terminology\n- Include practical examples\n- Provide context when needed\n- Review and revise regularly"}]